Test run started at 21:32:32.11 on Mon 06/30/2025 
Optimizer: all 
======================================== 
 
Python version: 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]
Testing directory: C:\git\roster_opt
Date and time: 2025-06-30 21:32:34
----------------------------------------------------------------------
Running all optimizer tests separately to avoid module conflicts...

======================================================================
Running MLB tests...
======================================================================
Python version: 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]
Testing directory: C:\git\roster_opt
Date and time: 2025-06-30 21:32:36
----------------------------------------------------------------------

Discovering MLB optimizer tests...
Found 5 MLB test cases in C:\git\roster_opt\MLB_Optimizer\tests
MLB test files: test_advanced_optimizer.py, test_injury_manager.py, test_integration.py, test_optimizer.py

Running mlb tests...
Total test cases to run: 5
----------------------------------------------------------------------
Loading injured players from: test_injuries.csv
Injury file columns: ['Player', 'Team', 'Position', 'Status']
Using 'Player' as the player name column
Found 3 players on the injury list
Filtered out 3 injured players from the player pool.
Searching for injury list files in:
- C:\git\roster_opt
- C:\git
- C:\Users\galac\Downloads
- C:\git\data
  Found 1 matches for 'C:\git\roster_opt\mlb-injury*.csv'
  Found 1 matches for 'C:\git\roster_opt\*injury*.csv'
  Found 1 matches for 'C:\git\roster_opt\*injured*.csv'
  Found 1 matches for 'C:\git\roster_opt\*-IL-*.csv'
  Found 1 matches for 'C:\git\mlb-injury*.csv'
  Found 1 matches for 'C:\git\*injury*.csv'
  Found 1 matches for 'C:\git\*injured*.csv'
  Found 1 matches for 'C:\git\*-IL-*.csv'
  Found 1 matches for 'C:\Users\galac\Downloads\mlb-injury*.csv'
  Found 1 matches for 'C:\Users\galac\Downloads\*injury*.csv'
  Found 1 matches for 'C:\Users\galac\Downloads\*injured*.csv'
  Found 1 matches for 'C:\Users\galac\Downloads\*-IL-*.csv'
  Found 1 matches for 'C:\git\data\mlb-injury*.csv'
  Found 1 matches for 'C:\git\data\*injury*.csv'
  Found 1 matches for 'C:\git\data\*injured*.csv'
  Found 1 matches for 'C:\git\data\*-IL-*.csv'
Found 16 potential injury list files.
Most recent: test_injuries.csv
Last modified: 1751337157.0251777
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1
Loading injured players from: test_mlb_injuries.csv
Injury file columns: ['Player', 'Team', 'Position', 'Status']
Using 'Player' as the player name column
Found 5 players on the injury list
Filtered out 5 injured players from the player pool.
Could not find optimal solution for lineup 1

Lineups saved to C:\git\roster_opt\test_output\test_output_lineups.csv
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 2
Could not find optimal solution for lineup 3
Could not find optimal solution for lineup 1
Could not find optimal solution for lineup 1

MLB Test Summary:
----------------------------------------------------------------------
Tests run: 23
Failures: 0
Errors: 0
Skipped: 10
Test duration: 2.19 seconds

MLB tests PASSED!

STDERR: test_extract_opponents (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_extract_opponents)
Test extracting opponents from game information. ... ok
test_filter_injured_players (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_filter_injured_players)
Test filtering injured players from the player pool. ... ok
test_find_injured_list (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_find_injured_list)
Test the find_injured_list function. ... ok
test_init (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_init)
Test the initialization of the AdvancedLineupOptimizer class. ... ok
test_lineup_diversity (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_lineup_diversity)
Test lineup diversity constraints. ... skipped 'No lineups generated, skipping lineup diversity test.'
test_max_players_from_team_constraint (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_max_players_from_team_constraint)
Test the maximum players from one team constraint. ... skipped 'No lineups generated, skipping team constraint test.'
test_min_salary_used_constraint (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_min_salary_used_constraint)
Test minimum salary used constraint. ... skipped 'No lineups generated, skipping salary constraint test.'
test_optimize_basic_functionality (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_optimize_basic_functionality)
Test basic optimization functionality. ... skipped 'No lineups generated, skipping lineup structure test.'
test_player_appearance_limit (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_player_appearance_limit)
Test limiting the number of times a player can appear across lineups. ... ok
test_team_stacking (tests.test_advanced_optimizer.TestAdvancedLineupOptimizer.test_team_stacking)
Test the team stacking functionality. ... skipped 'No lineups generated, skipping lineup structure test.'
test_list_all_injury_files (tests.test_injury_manager.TestInjuryManager.test_list_all_injury_files)
Test finding all injury files. ... ok
test_preview_injury_file (tests.test_injury_manager.TestInjuryManager.test_preview_injury_file)
Test previewing injury file contents. ... ok
test_preview_injury_file_error (tests.test_injury_manager.TestInjuryManager.test_preview_injury_file_error)
Test handling errors when previewing invalid files. ... ok
test_basic_to_advanced_optimizer_consistency (tests.test_integration.TestMLBOptimizerIntegration.test_basic_to_advanced_optimizer_consistency)
Test that basic and advanced optimizers produce consistent results. ... skipped 'Skipping optimizer points comparison since data structures may vary'
test_end_to_end_optimization (tests.test_integration.TestMLBOptimizerIntegration.test_end_to_end_optimization)
Test the complete optimization workflow. ... skipped 'No lineups generated, skipping end-to-end test.'
test_output_file_generation (tests.test_integration.TestMLBOptimizerIntegration.test_output_file_generation)
Test that output files are generated correctly. ... ok
test_validated_optimizer_script (tests.test_integration.TestMLBOptimizerIntegration.test_validated_optimizer_script)
Test the run_validated_optimizer script. ... skipped 'Skipping due to issues with mocking built-in functions'
test_data_loading (tests.test_optimizer.TestLineupOptimizer.test_data_loading)
Test that player data is loaded correctly. ... ok
test_extract_opponent (tests.test_optimizer.TestLineupOptimizer.test_extract_opponent)
Test the _extract_opponent method. ... ok
test_init (tests.test_optimizer.TestLineupOptimizer.test_init)
Test the initialization of the LineupOptimizer class. ... ok
test_multiple_lineups_diversity (tests.test_optimizer.TestLineupOptimizer.test_multiple_lineups_diversity)
Test generating multiple lineups with diversity. ... skipped 'No lineups generated, skipping multiple lineups diversity test.'
test_optimize_single_lineup (tests.test_optimizer.TestLineupOptimizer.test_optimize_single_lineup)
Test generating a single optimized lineup. ... skipped 'No lineups generated, skipping assertions'
test_salary_cap_constraint (tests.test_optimizer.TestLineupOptimizer.test_salary_cap_constraint)
Test that the salary cap constraint is enforced. ... ok

----------------------------------------------------------------------
Ran 23 tests in 2.193s

OK (skipped=10)

MLB tests completed successfully

======================================================================
Running F1 tests...
======================================================================
Python version: 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]
Testing directory: C:\git\roster_opt
Date and time: 2025-06-30 21:32:41
----------------------------------------------------------------------

Discovering F1 optimizer tests...
Found 4 F1 test cases in C:\git\roster_opt\F1_Optimizer\tests
F1 test files: test_advanced_optimizer.py, test_integration.py, test_optimizer.py

Running f1 tests...
Total test cases to run: 4
----------------------------------------------------------------------

Lineups saved to C:\git\roster_opt\Outputs\lineup_20250630_120000_20250630_213243.csv
Lineup 3: Excluded 4 drivers/constructors who reached the max appearance limit of 2
Lineup 4: Excluded 6 drivers/constructors who reached the max appearance limit of 2
Could not find optimal solution for lineup 4
Lineup 3: Excluded 4 drivers/constructors who reached the max appearance limit of 2
Could not find optimal solution for lineup 3

Lineups saved to C:\git\roster_opt\test_output\test_output_lineups.csv
Could not find optimal solution for lineup 1

F1 Test Summary:
----------------------------------------------------------------------
Tests run: 21
Failures: 3
Errors: 2
Skipped: 0
Test duration: 3.95 seconds

F1 tests FAILED.

Failure details:

1. test_basic_to_advanced_optimizer_consistency (tests.test_integration.TestF1OptimizerIntegration.test_basic_to_advanced_optimizer_consistency)
----------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 82, in test_basic_to_advanced_optimizer_consistency
    self.assertGreaterEqual(
AssertionError: np.float64(301.05) not greater than or equal to np.float64(334.5)

----------------------------------------

2. test_end_to_end_optimization (tests.test_integration.TestF1OptimizerIntegration.test_end_to_end_optimization)
----------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 107, in test_end_to_end_optimization
    self.assertEqual(len(lineups), 5)
AssertionError: 2 != 5

----------------------------------------

3. test_output_formatting (tests.test_optimizer.TestF1LineupOptimizer.test_output_formatting)
----------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_optimizer.py", line 172, in test_output_formatting
    self.assertIn('points', player)
AssertionError: 'points' not found in {'id': np.int64(4), 'name': 'Driver4', 'position': 'CPT', 'team': 'ALPI', 'game_info': 'Monaco GP', 'salary': np.int64(9000), 'avg_points': np.float64(82.5)}

----------------------------------------

Error details:

1. test_captain_point_calculation (tests.test_integration.TestF1OptimizerIntegration.test_captain_point_calculation)
----------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 174, in test_captain_point_calculation
    self.assertAlmostEqual(captain['points'], expected_captain_points)
                           ~~~~~~~^^^^^^^^^^
KeyError: 'points'

----------------------------------------

2. test_optimize_single_lineup (tests.test_optimizer.TestF1LineupOptimizer.test_optimize_single_lineup)
----------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_optimizer.py", line 100, in test_optimize_single_lineup
    self.assertEqual(captain['points'], captain['avg_points'] * 1.5)
                     ~~~~~~~^^^^^^^^^^
KeyError: 'points'

----------------------------------------

STDERR: test_captain_constructor_compatibility (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_captain_constructor_compatibility)
Test that captain selection is compatible with constructor. ... ok
test_init (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_init)
Test the initialization of the AdvancedLineupOptimizer class. ... ok
test_lineup_diversity (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_lineup_diversity)
Test lineup diversity constraints. ... ok
test_max_from_team_constraint (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_max_from_team_constraint)
Test the maximum players from one team constraint. ... ok
test_min_salary_used_constraint (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_min_salary_used_constraint)
Test minimum salary used constraint. ... ok
test_optimize_basic_functionality (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_optimize_basic_functionality)
Test basic optimization functionality. ... ok
test_output_file_generation (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_output_file_generation)
Test that output files are generated correctly. ... ok
test_player_appearance_limit (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_player_appearance_limit)
Test limiting the number of times a player can appear across lineups. ... ok
test_team_stacking (tests.test_advanced_optimizer.TestAdvancedF1LineupOptimizer.test_team_stacking)
Test the team stacking functionality. ... ok
test_basic_to_advanced_optimizer_consistency (tests.test_integration.TestF1OptimizerIntegration.test_basic_to_advanced_optimizer_consistency)
Test that basic and advanced optimizers produce consistent results. ... FAIL
test_captain_point_calculation (tests.test_integration.TestF1OptimizerIntegration.test_captain_point_calculation)
Test that captain points are calculated correctly (1.5x). ... ERROR
test_end_to_end_optimization (tests.test_integration.TestF1OptimizerIntegration.test_end_to_end_optimization)
Test the complete optimization workflow. ... FAIL
test_multiple_lineup_diversity (tests.test_integration.TestF1OptimizerIntegration.test_multiple_lineup_diversity)
Test that multiple lineups have appropriate diversity. ... ok
test_output_file_generation (tests.test_integration.TestF1OptimizerIntegration.test_output_file_generation)
Test that output files are generated correctly. ... ok
test_captain_constraint (tests.test_optimizer.TestF1LineupOptimizer.test_captain_constraint)
Test that a driver cannot be both a captain and regular driver. ... ok
test_data_loading (tests.test_optimizer.TestF1LineupOptimizer.test_data_loading)
Test that player data is loaded correctly. ... ok
test_init (tests.test_optimizer.TestF1LineupOptimizer.test_init)
Test the initialization of the LineupOptimizer class. ... ok
test_multiple_lineups_diversity (tests.test_optimizer.TestF1LineupOptimizer.test_multiple_lineups_diversity)
Test generating multiple lineups with diversity. ... ok
test_optimize_single_lineup (tests.test_optimizer.TestF1LineupOptimizer.test_optimize_single_lineup)
Test generating a single optimized lineup. ... ERROR
test_output_formatting (tests.test_optimizer.TestF1LineupOptimizer.test_output_formatting)
Test that the lineup output is formatted correctly. ... FAIL
test_salary_cap_constraint (tests.test_optimizer.TestF1LineupOptimizer.test_salary_cap_constraint)
Test that the salary cap constraint is enforced. ... ok

======================================================================
ERROR: test_captain_point_calculation (tests.test_integration.TestF1OptimizerIntegration.test_captain_point_calculation)
Test that captain points are calculated correctly (1.5x).
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 174, in test_captain_point_calculation
    self.assertAlmostEqual(captain['points'], expected_captain_points)
                           ~~~~~~~^^^^^^^^^^
KeyError: 'points'

======================================================================
ERROR: test_optimize_single_lineup (tests.test_optimizer.TestF1LineupOptimizer.test_optimize_single_lineup)
Test generating a single optimized lineup.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_optimizer.py", line 100, in test_optimize_single_lineup
    self.assertEqual(captain['points'], captain['avg_points'] * 1.5)
                     ~~~~~~~^^^^^^^^^^
KeyError: 'points'

======================================================================
FAIL: test_basic_to_advanced_optimizer_consistency (tests.test_integration.TestF1OptimizerIntegration.test_basic_to_advanced_optimizer_consistency)
Test that basic and advanced optimizers produce consistent results.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 82, in test_basic_to_advanced_optimizer_consistency
    self.assertGreaterEqual(
AssertionError: np.float64(301.05) not greater than or equal to np.float64(334.5)

======================================================================
FAIL: test_end_to_end_optimization (tests.test_integration.TestF1OptimizerIntegration.test_end_to_end_optimization)
Test the complete optimization workflow.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_integration.py", line 107, in test_end_to_end_optimization
    self.assertEqual(len(lineups), 5)
AssertionError: 2 != 5

======================================================================
FAIL: test_output_formatting (tests.test_optimizer.TestF1LineupOptimizer.test_output_formatting)
Test that the lineup output is formatted correctly.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "C:\git\roster_opt\F1_Optimizer\tests\test_optimizer.py", line 172, in test_output_formatting
    self.assertIn('points', player)
AssertionError: 'points' not found in {'id': np.int64(4), 'name': 'Driver4', 'position': 'CPT', 'team': 'ALPI', 'game_info': 'Monaco GP', 'salary': np.int64(9000), 'avg_points': np.float64(82.5)}

----------------------------------------------------------------------
Ran 21 tests in 3.951s

FAILED (failures=3, errors=2)

F1 tests FAILED with return code 1

======================================================================
Running NBA-WNBA tests...
======================================================================
Python version: 3.12.0 (tags/v3.12.0:0fb18b0, Oct  2 2023, 13:03:39) [MSC v.1935 64 bit (AMD64)]
Testing directory: C:\git\roster_opt
Date and time: 2025-06-30 21:32:48
----------------------------------------------------------------------

Discovering NBA/WNBA Showdown Captain optimizer tests...
Found 4 NBA/WNBA test cases in C:\git\roster_opt\NBA-WNBA-ShowdownCaptain_optimizer\tests
NBA/WNBA test files: test_advanced_optimizer.py, test_integration.py, test_optimizer.py

Running nba-wnba tests...
Total test cases to run: 4
----------------------------------------------------------------------
Loaded 10 players from test_wnba_advanced.csv
Loaded 10 players from test_wnba_advanced.csv

Generating lineup 1 of 3
Lineup 10 optimization complete:
Captain: Player1 (LVA)
Utility players:
- Player2 (LVA)
- Player3 (LVA)
- Player4 (LVA)
- Player5 (LVA)
- Player6 (NYL)
Team breakdown:
- LVA: 5 players
- NYL: 1 players
Total salary: $50000.0 of $50000
Projected points: 230.00

Generating lineup 2 of 3
Could not find optimal solution for lineup 10

Generating lineup 3 of 3
Could not find optimal solution for lineup 10
Loaded 10 players from test_wnba_advanced.csv

Generating lineup 1 of 1
Lineup 10 optimization complete:
Captain: Player1 (LVA)
Utility players:
- Player2 (LVA)
- Player3 (LVA)
- Player4 (LVA)
- Player5 (LVA)
- Player6 (NYL)
Team breakdown:
- LVA: 5 players
- NYL: 1 players
Total salary: $50000.0 of $50000
Projected points: 230.00
Loaded 10 players from test_wnba_advanced.csv

Generating lineup 1 of 1
Could not find optimal solution for lineup 1
Loaded 10 players from test_wnba_advanced.csv
Loaded 10 players from test_wnba_advanced.csv

Generating lineup 1 of 1
Added constraint to include at least 4 players from LVA
Lineup 10 optimization complete:
Captain: Player1 (LVA)
Utility players:
- Player2 (LVA)
- Player3 (LVA)
- Player4 (LVA)
- Player5 (LVA)
- Player6 (NYL)
Team breakdown:
- LVA: 5 players
- NYL: 1 players
Total salary: $50000.0 of $50000
Projected points: 230.00
Loaded 100 players from test_wnba_players.csv
Loaded 100 players from test_wnba_players.csv

Generating lineup 1 of 1
Lineup 100 optimization complete:
Captain: Player48 (DAL)
Utility players:
- Player2 (CON)
- Player9 (ATL)
- Player12 (CON)
- Player22 (CON)
- Player73 (SEA)
Total salary: $50000.0
Projected points: 200.00

Generating lineup 1 of 1
Lineup 100 optimization complete:
Captain: Player48 (DAL)
Utility players:
- Player2 (CON)
- Player9 (ATL)
- Player12 (CON)
- Player22 (CON)
- Player73 (SEA)
Team breakdown:
- DAL: 1 players
- CON: 3 players
- ATL: 1 players
- SEA: 1 players
Total salary: $50000.0 of $50000
Projected points: 200.00
Loaded 100 players from test_wnba_players.csv

Generating lineup 1 of 3
Added constraint to include at least 3 players from LVA
Lineup 100 optimization complete:
Captain: Player28 (DAL)
Utility players:
- Player9 (ATL)
- Player40 (LVA)
- Player60 (LVA)
- Player80 (LVA)
- Player89 (ATL)
Team breakdown:
- DAL: 1 players
- ATL: 2 players
- LVA: 3 players
Total salary: $50000.0 of $50000
Projected points: 200.00

Generating lineup 2 of 3
Added constraint to include at least 3 players from LVA
Lineup 100 optimization complete:
Captain: Player18 (DAL)
Utility players:
- Player19 (ATL)
- Player40 (LVA)
- Player59 (ATL)
- Player70 (LVA)
- Player80 (LVA)
Team breakdown:
- DAL: 1 players
- ATL: 2 players
- LVA: 3 players
Total salary: $50000.0 of $50000
Projected points: 200.00

Generating lineup 3 of 3
Added constraint to include at least 3 players from LVA
Lineup 100 optimization complete:
Captain: Player88 (DAL)
Utility players:
- Player29 (ATL)
- Player30 (LVA)
- Player40 (LVA)
- Player70 (LVA)
- Player89 (ATL)
Team breakdown:
- DAL: 1 players
- ATL: 2 players
- LVA: 3 players
Total salary: $50000.0 of $50000
Projected points: 200.00
Loaded 100 players from test_wnba_players.csv

Generating lineup 1 of 2
Lineup 100 optimization complete:
Captain: Player48 (DAL)
Utility players:
- Player2 (CON)
- Player9 (ATL)
- Player12 (CON)
- Player22 (CON)
- Player73 (SEA)
Team breakdown:
- DAL: 1 players
- CON: 3 players
- ATL: 1 players
- SEA: 1 players
Total salary: $50000.0 of $50000
Projected points: 200.00

Generating lineup 2 of 2
Lineup 100 optimization complete:
Captain: Player48 (DAL)
Utility players:
- Player1 (NYL)
- Player12 (CON)
- Player25 (PHO)
- Player62 (CON)
- Player68 (DAL)
Team breakdown:
- DAL: 2 players
- NYL: 1 players
- CON: 2 players
- PHO: 1 players
Total salary: $50000.0 of $50000
Projected points: 200.00
Lineups saved to C:\git\roster_opt\test_output\test_wnba_lineups.csv
Detailed lineups saved to C:\git\roster_opt\test_output\test_wnba_lineups.csv
Loaded 8 players from test_wnba_players.csv
Loaded 8 players from test_wnba_players.csv
Loaded 8 players from test_wnba_players.csv
Loaded 8 players from test_wnba_players.csv

Generating lineup 1 of 1
Lineup 8 optimization complete:
Captain: Player1 (LVA)
Utility players:
- Player2 (LVA)
- Player3 (NYL)
- Player4 (NYL)
- Player5 (CON)
- Player6 (CON)
Total salary: $50000.0
Projected points: 185.00
Loaded 8 players from test_wnba_players.csv
Loaded 6 players from high_salary_test.csv

Generating lineup 1 of 1
Could not find optimal solution for lineup 6

NBA-WNBA Test Summary:
----------------------------------------------------------------------
Tests run: 14
Failures: 0
Errors: 0
Skipped: 2
Test duration: 1.68 seconds

NBA-WNBA tests PASSED!

STDERR: test_init (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_init)
Test the initialization of the advanced optimizer. ... ok
test_lineup_diversity (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_lineup_diversity)
Test lineup diversity constraints. ... skipped 'Not enough lineups generated, skipping diversity test'
test_min_salary_used_constraint (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_min_salary_used_constraint)
Test minimum salary used constraint. ... ok
test_player_exposure_constraints (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_player_exposure_constraints)
Test applying player exposure constraints. ... skipped 'No lineups generated, skipping exposure test'
test_team_correlations (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_team_correlations)
Test that team correlations are initialized correctly. ... ok
test_team_stacking (tests.test_advanced_optimizer.TestAdvancedWNBAShowdownOptimizer.test_team_stacking)
Test the team stacking functionality. ... ok
test_basic_to_advanced_optimizer_consistency (tests.test_integration.TestWNBAOptimizerIntegration.test_basic_to_advanced_optimizer_consistency)
Test that basic and advanced optimizers produce consistent results. ... ok
test_end_to_end_optimization (tests.test_integration.TestWNBAOptimizerIntegration.test_end_to_end_optimization)
Test the complete optimization workflow. ... ok
test_output_file_generation (tests.test_integration.TestWNBAOptimizerIntegration.test_output_file_generation)
Test that output files are generated correctly. ... ok
test_data_loading (tests.test_optimizer.TestWNBAShowdownOptimizer.test_data_loading)
Test that player data is loaded correctly. ... ok
test_extract_opponent (tests.test_optimizer.TestWNBAShowdownOptimizer.test_extract_opponent)
Test the _extract_opponent method. ... ok
test_init (tests.test_optimizer.TestWNBAShowdownOptimizer.test_init)
Test the initialization of the optimizer. ... ok
test_optimize_single_lineup (tests.test_optimizer.TestWNBAShowdownOptimizer.test_optimize_single_lineup)
Test generating a single optimized lineup. ... ok
test_salary_cap_constraint (tests.test_optimizer.TestWNBAShowdownOptimizer.test_salary_cap_constraint)
Test that the salary cap constraint is enforced. ... ok

----------------------------------------------------------------------
Ran 14 tests in 1.680s

OK (skipped=2)

NBA-WNBA tests completed successfully

======================================================================
OVERALL TEST SUMMARY:
======================================================================
Total duration: 15.95 seconds

Some tests FAILED.
 
Test run completed at 21:32:50.83 on Mon 06/30/2025 
======================================== 
Tests FAILED with errors. 
